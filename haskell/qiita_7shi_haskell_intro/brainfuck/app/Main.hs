module Main where

import Data.Array.IO



-- Returns list of backbracket
-- example input:
--    jmpBackList "--[+[-.,.]<+->]" []
-- expected return
--    [0, 0, 15, 0, 10, 0, 0, 0, 0, 5, 0, 0, 0, 0, 3]
--
--    jmpBackList "--[+[-.,.]<+->]" []
--    [0] ++ jmpBackList "-[+[-.,.]<+->]" [-1]
--    [0] ++ [0] ++ jmpBackList "[+[-.,.]<+->]" [-1, -1]
--    [0] ++ [0] ++ [0] ++ jmpBackList "+[-.,.]<+->]" [-1, -1, 3]
--    [0] ++ [0] ++ [0] ++ [0] ++ jmpBackList "[-.,.]<+->]" [-1, -1, 3, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ jmpBackList "-.,.]<+->]" [-1, -1, 3, -1, 5]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ jmpBackList ".,.]<+->]" [-1, -1, 3, -1, 5, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ jmpBackList ",.]<+->]" [-1, -1, 3, -1, 5, -1, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ jmpBackList ".]<+->]" [-1, -1, 3, -1, 5, -1, -1, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ jmpBackList "]<+->]" [-1, -1, 3, -1, 5, -1, -1, -1, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [5] ++ jmpBackList "<+->]" [-1, -1, 3, -1, -1, -1, -1, -1, -1, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [5] ++ [0] ++ jmpBackList "+->]" [-1, -1, 3, -1, -1, -1, -1, -1, -1, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [5] ++ [0] ++ [0] ++ jmpBackList "->]" [-1, -1, 3, -1, -1, -1, -1, -1, -1, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [5] ++ [0] ++ [0] ++ [0] ++ jmpBackList ">]" [-1, -1, 3, -1, -1, -1, -1, -1, -1, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [5] ++ [0] ++ [0] ++ [0] ++ [0] ++ jmpBackList "]" [-1, -1, 3, -1, -1, -1, -1, -1, -1, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [5] ++ [0] ++ [0] ++ [0] ++ [0] ++ [3] ++ jmpBackList [] [-1, -1, 3, -1, -1, -1, -1, -1, -1, -1]
--    [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [0] ++ [5] ++ [0] ++ [0] ++ [0] ++ [0] ++ [3] ++ []
--    [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 3]
jmpBackList :: [Char] -> [Char] -> [Char]
jmpBackList [] _                  = []
jmpBackList (x:xs) lp | x == '['  = jmpBackList xs $ lp ++ [length lp +1]
                      | x == ']'  = [s] ++ jmpBackList xs lp'
                          where
                              s   = last [n | n <- lp, n /= -1]
                              lp' = [n | n <- lp, n /= s] ++ [-1]
                      | otherwise = [0] ++ jmpBackList xs $ lp ++ [-1]


main = do
    loops <- newArray (0, length bf) 15 :: IO (IOUArray Int Int)
    jump <- jmpBackList bf []
  
let bf = ">+++++++++[<++++++++>-]<.>+++++++[<++++>" ++
         "-]<+.+++++++..+++.[-]>++++++++[<++++>-]<" ++
         ".>+++++++++++[<+++++>-]<.>++++++++[<+++>" ++
         "-]<.+++.------.--------.[-]>++++++++[<++" ++
         "++>-]<+.[-]++++++++++."
