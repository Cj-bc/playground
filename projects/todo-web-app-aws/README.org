* 技術選定
** Backend
*** 言語選択: Go言語
+ シンプルに課題で使っていたので、そのまま一つ何か作りたかった
+ AWS SDKを扱い慣れているのがGoだけだった
+ Haskellのservantやwarpで鯖書くのも試してみたかったが、時間の都合で今回は見送り
*** データ保存形式: SQLite3
+ 最初はRDBを考えたが、以下の理由により却下
  + データ形式がシンプルであり、わざわざRelationalにする必要性がない
  + S3を用いてデータを保存したいと考えた時に
+ YAML, JSON, CSV等のプレーンテキストファイルを用いたNoSQLも考えたが、ファイルへの書き込みタイミングを
  注意しないとデータが壊れそうだったりしたのでやめた(よくわからなかった)
+ データベースの中で、SQLite3だけ実際に触れたことがあった。そこまで機能を要求しない案件であり長期的に使うものでも
  ないため、使用したことのあるものを選んだ。
  
*** サーバーフレームワーク: Gin
+ ~net/http~ はとりあえずチュートリアルで触ったが、WebAPI向けというよりか
  SSR的な使い方用だと誤認したので選択しなかった
+ とりあえずGinの名前を知っていたのでチュートリアルを終わらせており、時間的に他のものを試す余裕がなかった
** Frontend
*** Elm
+ 使ったことがあるのがElmくらいだった
  + Reactも少し触れたが、さっさと書けるレベルではない
  + TypeScriptは読めるけど書いたことはないので尚更。
* 構築手順
** 使用するアプリケーションを持つAMIイメージを作成する
アプリケーションは手元で書いてあるので、それを自動的に起動してくれるAMIイメージを作成します。
AMI Builderもあるようですが、CI向けなのかな？という印象を受けたため手動で行います。

今回は、フロントエンドとバックエンドでそれぞれ別のインスタンスになるので2つ作成することになります。

*** インスタンスの立ち上げ
まずはEC2のWebコンソールから、手順に従ってインスタンスを立ち上げます。
**** ベースAMIの選定
AWS SDK for GoがGo 1.15以降を要求するため、その条件を満たすものを使用します。
今回は、そこまで細かく考えている時間がなかったため講義で用いていたものと同じ ~ami-01793c7e51cad3af9~
(Ubuntu kinetic 22.10)を使います。

EC2のWebコンソールからAMIのページを開き、"Launch instance from AMI" で立ち上げ処理を開始します。
**** 諸々の設定
| Instance Type        | t2.micro                           |
| Key Pair             | 自分の                             |
| SSH                  | 自分のCloud9環境のIP Addressを指定 |
| IAM Instance Profile | ~demo-iam-role~                    |
| VPC                  | a20dc036                           |
| Subnet               | a20dc036-az1                       |
| Security-group       | a20dc036-allow-ssh                 |

Security-Groupは実際に運用する時には他のものを用いますが、今はsshだけ出来れば良いのでこうしておきます。
**** SSHログイン用にGlobal IP紐付け
Cloud9から入れるようにするために、EIPを紐付けます。
手持ちのものが既存のインスタンスに紐付いていたので、WebコンソールのInstancesからそのインスタンスを
選択し、Actions>Networking>Disassociate Elastic IP Addressで外します。


その後、WebコンソールのElastic IP Addressesから該当のEIPを選択し、Actions>Associate Elastic IP Addressを選択します。
先程のインスタンスを選択して、関連付けが出来ました。
*** バックエンド用インスタンスを作成する
**** 必要なプログラムをインストールする
***** バックエンド
本体はバイナリで置くとして、SQLite3が
**** S3にデータを置く
プログラムのアップロードのために、一旦S3にデータを置きます。
本体はバイナリで置くことにするため、手元で先にビルドしておきます。
CD/CIを組んでみたかったのですが、時間がないので先送りにしました。

WebコンソールからS3を開き、設定は何も変えずにアップロードします。
今回は ~s3://dhw-a20dc036/todo-web-app/go-server~ として保存しました。
**** Instanceにデータを持ってくる
データを持ってくるためにAWSCLIを用いたいのでインストールします。

#+begin_src sh
  $ sudo apt-get update
  $ sudo apt install awscli
  $ aws s3 cp s3://dhw-a20dc036/todo-web-app/go-server .
  $ mv go-server /usr/local/bin/
  $ chmod +x /usr/local/bin/go-server
#+end_src

~s3 cp~ と ~mv~ を別のコマンドで行う必要はなかった気がしますが、忘れていました。
そうしたら、一度起動出来ることを確認して、次はフロントエンドのインスタンスを作成します。
*** フロントエンド用インスタンスを作成する
*** 双方動かした状態で、外部からアクセスしてみて動くことを確認する
* あ
** バックエンド鯖のPrivate IPを固定したい
JavaScriptないしTypeScriptでAWS SDKを使う事は出来はするが、
正直時間の都合上あまりやりたくない。

